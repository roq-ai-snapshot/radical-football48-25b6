generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model academy {
  id      String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name    String @db.VarChar(255)
  user_id String @db.Uuid
  user    user   @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  team    team[]
}

model attendance {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  player_id   String   @db.Uuid
  schedule_id String   @db.Uuid
  status      String   @db.VarChar(50)
  player      player   @relation(fields: [player_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  schedule    schedule @relation(fields: [schedule_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model coach {
  id            String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id       String          @db.Uuid
  team_id       String          @db.Uuid
  first_name    String          @db.VarChar(255)
  last_name     String          @db.VarChar(255)
  team          team            @relation(fields: [team_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user          user            @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  practice_plan practice_plan[]
}

model communication {
  id                                   String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  sender_id                            String   @db.Uuid
  receiver_id                          String   @db.Uuid
  message                              String
  timestamp                            DateTime @db.Timestamp(6)
  user_communication_receiver_idTouser user     @relation("communication_receiver_idTouser", fields: [receiver_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user_communication_sender_idTouser   user     @relation("communication_sender_idTouser", fields: [sender_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model drill {
  id               String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  practice_plan_id String        @db.Uuid
  name             String        @db.VarChar(255)
  description      String?
  practice_plan    practice_plan @relation(fields: [practice_plan_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model player {
  id            String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id       String       @db.Uuid
  team_id       String       @db.Uuid
  first_name    String       @db.VarChar(255)
  last_name     String       @db.VarChar(255)
  date_of_birth DateTime     @db.Date
  attendance    attendance[]
  team          team         @relation(fields: [team_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user          user         @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model practice_plan {
  id          String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  coach_id    String  @db.Uuid
  title       String  @db.VarChar(255)
  description String?
  drill       drill[]
  coach       coach   @relation(fields: [coach_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model schedule {
  id         String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  team_id    String       @db.Uuid
  event_name String       @db.VarChar(255)
  start_time DateTime     @db.Timestamp(6)
  end_time   DateTime     @db.Timestamp(6)
  attendance attendance[]
  team       team         @relation(fields: [team_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model team {
  id         String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name       String     @db.VarChar(255)
  academy_id String     @db.Uuid
  coach      coach[]
  player     player[]
  schedule   schedule[]
  academy    academy    @relation(fields: [academy_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id                                            String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email                                         String?         @unique @db.VarChar(255)
  firstName                                     String?         @db.VarChar(255)
  lastName                                      String?         @db.VarChar(255)
  roq_user_id                                   String          @db.VarChar(255)
  tenant_id                                     String          @db.VarChar(255)
  academy                                       academy[]
  coach                                         coach[]
  communication_communication_receiver_idTouser communication[] @relation("communication_receiver_idTouser")
  communication_communication_sender_idTouser   communication[] @relation("communication_sender_idTouser")
  player                                        player[]
}
